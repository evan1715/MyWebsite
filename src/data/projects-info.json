[
    {
        "id": "chat-app",
        "imageVariable": "chatApp",
        "cardTitle": "Chat App",
        "descriptiveTitle": "Chat App",
        "subtitle": "NodeJS/Express, Socket.IO, Mustache templating",
        "text": "This was created while learning NodeJS. It features real-time live chat with socket.io, chat room, names, and utilizing a user's location.",
        "body": "This is a simple app that uses socket.io to create a WebSocket (TCP) connection to the server for live chat between users. A user can join a group that's already created or they can create a new one. It features autoscroll but won't autoscroll when there's a new message and you're scrolling upwards. Chats can be sent as well as a user's location. Users will be added and removed as they login and exit the tab so that they do not forever remain in the session. This app features NodeJS with Express, Socket.IO for the WebSocket, a profanity filter, and front-end vanilla JavaScript with templating using Mustache.",
        "links": ["/coding#chat-app", "https://github.com/evan1715/ChatApp", "https://jd1715-chat.azurewebsites.net"]
    }, {
        "id": "indecision-app",
        "imageVariable": "indecisionApp",
        "cardTitle": "Indecision App",
        "descriptiveTitle": "Indecision App",
        "subtitle": "React, SCSS, Webpack",
        "text": "This was created while learning React. A user can add or remove options. If they are undecided, a button will randomly decide.",
        "body": "This app was created while I was initially learning React, SCSS, and Webpack. Using props and class components in React, the app will randomize a to-do list for a user to do. One would add multiple things to the list of things to do, and if they're indecisive on what to do, just simply press the 'What should I do?' button. The SCSS uses an organized file structure with base & settings, and components in another folder. The styling uses BEM (Block Element Modifier) standard for formatting and organizing CSS. Webpack was also learned and used during this project. If you've got some things to do, but don't know where to start, go ahead and try it out! This app has now be integrated into this website for deployment. The original source is still separated. However, if you wish to view its integration into this website, then view this website's source code.",
        "links": ["/coding#indecision-app", "https://github.com/evan1715/IndecisionApp", "/indecision"]
    }, {
        "id": "jdfix",
        "imageVariable": "jdMod",
        "cardTitle": "JDFix",
        "descriptiveTitle": "JDFix - Video Game Mod",
        "subtitle": "C",
        "text": "This is an old video game mod I did when I was younger in C with the JK2 source code based on the Quake III engine. The intent was to patch many highly exploited bugs.",
        "body": "I used to work on a few mods for the video games Star Wars Jedi Knight II: Jedi Outcast and Star Wars: Jedi Knight: Jedi Academy, abbreviated JK2 and JKA/JK3. The primary goal of the mods were to fix, create work-arounds, supplement, and more to counter bugs, crashes, as well as expand limited features, and others too. The main way of doing it was through the source code written in C based on the Quake III Engine, now called the id Tech 3 engine. Due to multiple versions of each game, not every fix was as easy as changing the source code. Some involved reverse engineering, hex editing, injecting .dll files, using scripts, or other means. JDFix is for the source code. I used to host a forum website for the mod, the community, and more where users would post questions, talk about code, and what else could we do with the limited tools given. JDFix got popular enough, other creators wanted to simply integrate my mod into theirs because it was a background mod and didn't change much of the original game. The efforts that were on my forum, my mod, and some others, have evolved from mine into a much larger projects after the official source code was released. If you go to the source link, the readme will give an overview of the folders. For the folder the official mod, and not just all the works, you can click the JDFix link to read the readme and version history.",
        "links": ["/coding#jdfix", "https://github.com/evan1715/JDFix-for-JK2", "", "https://github.com/evan1715/JDFix-for-JK2/tree/master/JDFix%20Mod/JDFix%201.04%20Mod/JediDog%20Fix"]
    }, {
        "id": "my-website",
        "imageVariable": "myWebsite",
        "cardTitle": "My Website",
        "descriptiveTitle": "My Website",
        "subtitle": "NextJS, Bootstrap, SCSS",
        "text": "That's this website! This website uses NextJS and bootstrap with the intent to showcase.",
        "body": "It's this website you're using now! This project expanded my knowledge of React, styling, and NodeJS by using and learning NextJS and Bootstrap. There's also included subtle animations at random spots. Feel free to explore the website and my pages.",
        "links": ["/coding#my-website", "https://github.com/evan1715/MyWebsite", "https://www.evanmchugh.us/"]
    }, {
        "id": "task-manager",
        "imageVariable": "taskManager",
        "cardTitle": "Task Manager",
        "descriptiveTitle": "Task Manager - API",
        "subtitle": "NodeJS/Express, MongoDB/Mongoose, Authentication",
        "text": "The task manager app is an API-based project created while learning NodeJS. It includes middleware, user authentication, login tokens, database usage, user avatars, and more.",
        "body": "The Task Manager app is an API-only app. Meaning that when you click the Deployment link, it won't go to an actual website because there is no front-end. To access the API, you use Postman or something similar to access the NodeJS API. The app features NodeJS with Express, active connection to MongoDB using Mongoose, and even authentication with hashed passwords. The active login token is stored in the database. The idea is you create an account, add tasks, and see what you need to do. Sort of like a to-do list. A user can create a user, login, logout, logout of all locations, read their profile, user, tasks, delete user or tasks, upload avatar, or update existing user info or task info. Note that this project is no longer deployed for production. The reasons are Heroku ending its free tier, this merely just an API, and the RecipeProject can do all of this plus more.",
        "list": [
            "/user is a POST that creates a user", 
            "/users/login is a POST that will log you in with your email and password,", 
            "/users/logout is a POST that will logout the current user",
            "/users/logoutAll is a POST that will log the user out of all active locations",
            "/tasks is a POST to create a new task",
            "/users/me is a GET to read the current profile",
            "/users/:id is a GET to read a selected user profile",
            "/tasks?sortBy=createdAt_asc is a GET to get tasks and an example of sorting & pagination that can be used",
            "/tasks/:id is a GET to read one specific task based on the id",
            "/users/me is a PATCH to update the current user info",
            "/tasks/:id is a PATCH to update the current selected task",
            "/users/me is a DELETE to delete the current user",
            "/tasks/:id is a DELETE to delete the current task",
            "/users/me/avatar is a POST to upload an avatar for the user",
            "/users/me/avatar is a DELETE to delete the current avatar for the user"
        ],
        "links": ["/coding#task-manager", "https://github.com/evan1715/task-manager-api"]
    }, {
        "id": "recipe-project",
        "imageVariable": "recipeProject",
        "cardTitle": "Recipe Project",
        "descriptiveTitle": "Recipe Project - MERN Full Stack",
        "subtitle": "React/Redux, Node/Express, MongoDB/Mongoose, SCSS, Webpack, Authentication",
        "text": "This is the largest project I've done. It is a full-stack, user-based recipe website. There's too much to say to fit it on a card, so go ahead and click that 'Learn more' link.",
        "body": "This is my largest project I've done so far. It's a full-stack, user-based recipe website. It uses NodeJS with Express as the server and API, React with Redux as the front-end, MongoDB with Mongoose for the database, SCSS for styling, advance Webpack configuration, and authentication. The website was designed to be an account-focused website, so to view the most of the features, you'll have to create an account. Passwords are fully hashed and stored with bcrypt. One can create an account, upload an icon, submit recipes, modify recipes, upload multiple recipe pictures at a time, view another user's profile, and many more features. I also ensured code and network efficiency by storing things in Redux and only calling for information after a check to see if we didn't already have it. I've placed the readme below this for a very detailed description of the project.",
        "links": ["/coding#recipe-project", "https://github.com/evan1715/RecipeProject", "https://jd1715-recipe.azurewebsites.net"]
    }, {
        "id": "weather-app",
        "imageVariable": "weatherApp",
        "cardTitle": "Weather App",
        "descriptiveTitle": "Weather App",
        "subtitle": "NodeJS/Express, Handlebars templating",
        "text": "This is a small app that utilizes an external weather API to display weather information based on a search. It's uses Handlebars templating to serve pages from the server.",
        "body": "This is a small utility that uses Mapbox and Weatherstack API to deliver weather information to the user based on a search term. Pages are rendered with vanilla JavaScript and Handlebars templating to serve pages from the server.",
        "links": ["/coding#weather-app", "https://github.com/evan1715/WeatherApp", "https://jd1715-weather.azurewebsites.net/"]
    }
]